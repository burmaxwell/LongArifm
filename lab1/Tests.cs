using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using MSROM;


namespace lab1
{
    class Test
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("1", "1", "2")]
            [TestCase("A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "92BE89BBFCD3760ADF1071EAB7B159EC00C8D22A812B103FE8A24A7B1C922499", "134C77BF0164718FFF6E6F92C6A8F77D492E4CE7921CCD51A50A0D3C8CC298F1F")]
            [TestCase("C77E6EA7802A07E31653C4C0AF78F3CF46C47029E854EAD5B6710BFD1ED761DD", "530443350EDB89BF4809DF6E22FE8BF41D0E4E5212762AADA74F125A20996F9A", "11A82B1DC8F0591A25E5DA42ED2777FC363D2BE7BFACB15835DC01E573F70D177")]
            [TestCase("6E90A982977373DDC113D00578416811A541A7BF255C20CCDFFE10A0ED44E852874FBC1CE89D2051F6E976AFDBE808D9", "28E5296DBFDA46B352F0B55A94A893E5BAB7C3FFF244A189676E4A3A85F0385809EE736AD27FD4E09BA605EEEB16CA2C", "9775D2F0574DBA91140485600CE9FBF75FF96BBF17A0C256476C5ADB733520AA913E2F87BB1CF532928F7C9EC6FED305")]
            [TestCase("2","2","4")]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                 "0",
                 "5C353D8D758E06E4DFFB37B5")]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                 "1",
                 "5C353D8D758E06E4DFFB37B6")]
            [TestCase("671291C18CC4CEEA9F0878A9ED848F9A471AEFAF99C597B1062E7F5BE278E27444F0B6CD3951821905547367EB45B8C9",
                 "666A82C256DEBA9CA73BE9DFA4736678E37E8B7635C1A6BCF3A67ED7378C79F942A04CA8D8E3AD4D91C1B134641F6B65",
                 "CD7D1483E3A389874644628991F7F6132A997B25CF873E6DF9D4FE331A055C6D8791037612352F669716249C4F65242E")]
            public void AdditionTest(string hex1, string hex2, string expectedResult)
             {
                 var a = Program.toulong32(hex1);
                 var b = Program.toulong32(hex2);
                 var actualResult = Program.Addition(a, b);
                 Assert.AreEqual(expectedResult, actualResult);
             }

            [Test]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                  "0",
                  "5C353D8D758E06E4DFFB37B5"
            )]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                  "1",
                  "5C353D8D758E06E4DFFB37B4"
            )]
            [TestCase("6E90A982977373DDC113D00578416811A541A7BF255C20CCDFFE10A0ED44E852874FBC1CE89D2051F6E976AFDBE808D9", "28E5296DBFDA46B352F0B55A94A893E5BAB7C3FFF244A189676E4A3A85F0385809EE736AD27FD4E09BA605EEEB16CA2C", "45AB8014D7992D2A6E231AAAE398D42BEA89E3BF33177F43788FC6666754AFFA7D6148B2161D4B715B4370C0F0D13EAD")]
            [TestCase("FF92413583A4CAA23ECF4BB33025B1A58DE1217F358D0F40BE07D91AA298BB5E57B47199DA3D3EFA48487917D861CFA53CE5C0F2C46DEACAF0AC9E31C6578899", "8CFDEAF151E82924FB80AA4B861142CE6C524B34E61CC2ADED9AC5FBD650AFFAB2FBE98C1FB758D0A2C90E26DA6D7DA8623B3C49F7D4F16207A1B5D6B7875E25", "7294564431BCA17D434EA167AA146ED7218ED64A4F704C92D06D131ECC480B63A4B8880DBA85E629A57F6AF0FDF451FCDAAA84A8CC98F968E90AE85B0ED02A74")]
            public void SubtractionTest(string hex1, string hex2, string expectedResult)
            {
                var a = Program.toulong32(hex1);
                var b = Program.toulong32(hex2);
                var actualResult = Program.Subtraction(a, b);
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
                  "58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
                  "126E1F84C05F2F0478BC1BB97EA870E2357DFF1FA3ED0F8D9E4F2C4B1CF933D3F64BD22D9761FD598EF8F381AB2A84294359B2EE43D70170CF9182EBB961D56D19970429DEF02494C95B341ACC75EFF227A0D4BDD9149483D9D7143D56B3C25D8B55B81433AD812F60A7F4234854EB569EC021432DA486C3963DED2F227B4351"
            )]
            [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
                  "5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
                  "41EB89367562EC483164D0C6D5CADBDFA26C21CA40EEC1901C0ACAA8D2DD4B7AAA098AF873217DC3E34AE4A3D838DD3896AFD43B8C8336D47B41F082EB60FC1AAD6BA433EA3528F54ECF544CB7252EFA3CC6E1398D56723BC109BC9D23F079ABC7EB03DCCC266BDB80A08EEAC6D6B9AFBFC8E0899297CA9A9312FCECE5B7E8B1"
            )]
            [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
                  "8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
                  "62B21845EC85CCE30B870AE3825560BD43B7084466385E0E87D5BF6D92CA8BC8F5B7AED2293324C1AD4EC918A83FFA40051F788850BBAC2C4A9E0DE0E81A8F88B11FEA1BFFCB325B2959CFE1463F864598D6DB36F4517F8F8BD552CA2E64FF342D7B127B196A6B0019F0CE9DE0B9A691640A5B9D48609EF0EA25AE3AE6517AD4"
            )]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                  "1",
                  "5C353D8D758E06E4DFFB37B5"
            )]
            [TestCase("2","2","4")]
            [TestCase("4","4", "10")]
            [TestCase("1","1","1")]
            [TestCase("10","4","40")]
            [TestCase("4B", "2907058A0A9", "C050E9F71183")]
            [TestCase("A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "668F52D9F89E7C315B165F4A8FF1E2935238C7678A87939F5277513F121323F28EF99B183239D24AC441CFCDED27EEB743747803A8A321EA5F71DDCE0A673E24")]
            public void MulTest(string hex1, string hex2, string expectedResult)
            {
                var a = Program.toulong32(hex1);
                var b = Program.toulong32(hex2);
                var actualResult = Program.LongMul(a, b);
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("ABABABABAABABABABABABAABABABABABABAABAB",
                  "ABABABABAABABABABABABAABABABABABABAABAB",
                  "1"
            )]
            [TestCase("ABABABABAABABABABABABAABABABABABABAABAB",
                  "1",
                  "ABABABABAABABABABABABAABABABABABABAABAB"
            )]
            [TestCase("3AC9EC8A7D3A554C1E9094A1854ACB0E2B7CBDDE59C2ADA018173C98BF4DFB1BD8D5DCCFD5BDFA9E91C8839958684D7121B4DA8863925E77EA0A27A28867B6CE",
                   "A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
                   "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E29"
            )]
            [TestCase("101A3F04E4BB34DD41FE0893D0FCF341776CFF41016BB753DBF23B5D6FEBF156B5CE6C511D5E54876559CF6A0BC3CDB93CE883331CE1349F604D789C440E1FBA",
                   "62CFC9B03F18DEB0667A9F46DEA1D1D10AB9720ED7379F544B8C5DC67211EF89",
                   "29B7DCAFF9696345732544724E3C71710551355E18CB3405AF5917CFF3B0F890"
            )]
            public void DivTest(string hex1, string hex2, string expectedResult)
            {
                var a = Program.toulong32(hex1);
                var b = Program.toulong32(hex2);
                var actualResult = Program.LongDivInternal(a, b);
                Assert.AreEqual(expectedResult, actualResult);
            }

            
            [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFF", "0", "1")]
            [TestCase("2", "0", "1")]
            [TestCase("2", "1", "2")]
            [TestCase("2", "3", "8")]
            [TestCase("2", "4", "10")]
            [TestCase("2","5", "20")]
            [TestCase("2", "A", "400")]
            [TestCase("16D4CA8", "81", "47F077521DEA7B5C4CD4386F372D61793C148D2E707929FECFA88A253039BA4DF2E1BBB2EA092CA971416B99387373D3461E217E4717421BB4B1EBF9E7F03E49C4D3C772AF7F9D0C9DAE6C780EC639586992B190A3B985366BCF1DCAF6D80D1A49F1BF8BECCC26FE60F2F442BE1EF46F86580AAECB4DABE31244739193EFABF51DA3C4BDD66DA64602C2C54679F65CC6D7E61F6F14F91A74C929304163C9A50399477675E4CD92A76026EEECD7447B2B9664D0C2FEB79C1F46CAFA4A0CF8115706A028CB59F8B3A13821549D46F7B825FA3CB4A44AC3966EEF6395827F6F424DCFAF0D729CECFBDEE7EC4AA5F6EC4ECC011B788586B4CEDD179493AB425241A1573CF34B3FFD0B4DCDCA9C5366FA8C362DD876FF09900E49E172435F01B31B84209845B868AA3E495B0BEADA8415E1D7C788FC9FBB87561FCBEDB2BC7E47F086FDBF9840369FB384B24B66B90BE27968928A56ABD71C1FEF5863CA8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
            [TestCase("4B", "21", "2EE23EFAD9F31E4D2F24BFABDF6BEFA129ABDCF8C0116B93E4CB")]
            public void LongPowertTest(string hex1, string hex2, string expectedResult)
            {
                var a = Program.toulong32(hex1);
                var b = Program.toulong32(hex2);
                var actualResult = Program.LongPower(a, b);
                Assert.AreEqual(expectedResult, actualResult);
            }


        }

    }
}
